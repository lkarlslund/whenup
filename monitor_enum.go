// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// ICMP is a LiveMethod of type ICMP.
	ICMP LiveMethod = iota
)

var ErrInvalidLiveMethod = errors.New("not a valid LiveMethod")

const _LiveMethodName = "ICMP"

var _LiveMethodMap = map[LiveMethod]string{
	ICMP: _LiveMethodName[0:4],
}

// String implements the Stringer interface.
func (x LiveMethod) String() string {
	if str, ok := _LiveMethodMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LiveMethod(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LiveMethod) IsValid() bool {
	_, ok := _LiveMethodMap[x]
	return ok
}

var _LiveMethodValue = map[string]LiveMethod{
	_LiveMethodName[0:4]: ICMP,
}

// ParseLiveMethod attempts to convert a string to a LiveMethod.
func ParseLiveMethod(name string) (LiveMethod, error) {
	if x, ok := _LiveMethodValue[name]; ok {
		return x, nil
	}
	return LiveMethod(0), fmt.Errorf("%s is %w", name, ErrInvalidLiveMethod)
}

// MarshalText implements the text marshaller method.
func (x LiveMethod) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *LiveMethod) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLiveMethod(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// Unknown is a Status of type Unknown.
	Unknown Status = iota
	// Up is a Status of type Up.
	Up
	// Down is a Status of type Down.
	Down
)

var ErrInvalidStatus = errors.New("not a valid Status")

const _StatusName = "UnknownUpDown"

var _StatusMap = map[Status]string{
	Unknown: _StatusName[0:7],
	Up:      _StatusName[7:9],
	Down:    _StatusName[9:13],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Status) IsValid() bool {
	_, ok := _StatusMap[x]
	return ok
}

var _StatusValue = map[string]Status{
	_StatusName[0:7]:  Unknown,
	_StatusName[7:9]:  Up,
	_StatusName[9:13]: Down,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is %w", name, ErrInvalidStatus)
}

// MarshalText implements the text marshaller method.
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
